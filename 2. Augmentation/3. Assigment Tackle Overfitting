{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP//obCACMi0T7MRkUw1R0d"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Minggu 2: Atasi Overfitting dengan Augmentasi Data\n","\n","Selamat datang di tugas ini! Seperti minggu sebelumnya, Anda akan menggunakan kumpulan data `kucing vs anjing` yang terkenal untuk melatih model yang dapat mengklasifikasikan gambar anjing dari gambar kucing. Untuk ini, Anda akan membuat Jaringan Neural Konvolusional Anda sendiri di Tensorflow dan memanfaatkan utilitas prapemrosesan gambar Keras, terlebih lagi kali ini karena Keras memberikan dukungan luar biasa untuk menambah data gambar.\n","\n","Anda juga perlu membuat fungsi pembantu untuk memindahkan gambar di sekitar sistem file seperti yang Anda lakukan minggu lalu, jadi jika Anda perlu menyegarkan memori dengan modul `os`, pastikan untuk melihat [docs](https: //docs.python.org/3/library/os.html).\n","\n","Mari kita mulai!"],"metadata":{"id":"62ii7KqIEkcj"}},{"cell_type":"code","source":["import os\n","import random\n","import shutil\n","import zipfile\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from shutil import copyfile\n","import matplotlib.pyplot as plt\n"],"metadata":{"id":"BZkjr_4HEs6E","executionInfo":{"status":"ok","timestamp":1688393247723,"user_tz":-420,"elapsed":11,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["Unduh kumpulan data dari sumber aslinya dengan menjalankan sel di bawah ini.\n","\n","Perhatikan bahwa file `zip` yang berisi gambar di-unzip di bawah direktori `/tmp`."],"metadata":{"id":"6FVeyeMoFGcP"}},{"cell_type":"code","source":["!wget --no-check-certificate \\\n","    \"https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_5340.zip\" \\\n","    -O \"/tmp/cats-and-dogs.zip\"\n","\n","local_zip = '/tmp/cats-and-dogs.zip'\n","zip_ref   = zipfile.ZipFile(local_zip, 'r')\n","zip_ref.extractall('/tmp')\n","zip_ref.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7jo4riWpFKJn","executionInfo":{"status":"ok","timestamp":1688393297253,"user_tz":-420,"elapsed":19186,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}},"outputId":"a1806e40-c310-4025-ab79-7a78bb05ac4d"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-07-03 14:07:57--  https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_5340.zip\n","Resolving download.microsoft.com (download.microsoft.com)... 23.48.204.229, 2600:1407:2800:590::317f, 2600:1407:2800:596::317f\n","Connecting to download.microsoft.com (download.microsoft.com)|23.48.204.229|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 824887076 (787M) [application/octet-stream]\n","Saving to: ‘/tmp/cats-and-dogs.zip’\n","\n","/tmp/cats-and-dogs. 100%[===================>] 786.67M   121MB/s    in 8.0s    \n","\n","2023-07-03 14:08:05 (98.5 MB/s) - ‘/tmp/cats-and-dogs.zip’ saved [824887076/824887076]\n","\n"]}]},{"cell_type":"markdown","source":["Sekarang gambar disimpan di dalam direktori `/tmp/PetImages`. Ada subdirektori untuk setiap kelas, jadi satu untuk anjing dan satu lagi untuk kucing."],"metadata":{"id":"oEv_rxy_FN6y"}},{"cell_type":"code","source":["source_path = '/tmp/PetImages'\n","\n","source_path_dogs = os.path.join(source_path, 'Dog')\n","source_path_cats = os.path.join(source_path, 'Cat')\n","\n","# Deletes all non-image files (there are two .db files bundled into the dataset)\n","!find /tmp/PetImages/ -type f ! -name \"*.jpg\" -exec rm {} +\n","\n","# os.listdir returns a list containing all files under the given path\n","print(f\"There are {len(os.listdir(source_path_dogs))} images of dogs.\")\n","print(f\"There are {len(os.listdir(source_path_cats))} images of cats.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xt15XbKMFTRv","executionInfo":{"status":"ok","timestamp":1688393355907,"user_tz":-420,"elapsed":15,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}},"outputId":"397b91e7-6e5f-4f90-fe33-387fc2185080"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 12500 images of dogs.\n","There are 12500 images of cats.\n"]}]},{"cell_type":"markdown","source":["Anda memerlukan direktori untuk kucing-v-anjing, dan subdirektori untuk pelatihan\n","dan validasi. Ini pada gilirannya akan membutuhkan subdirektori untuk 'kucing' dan 'anjing'. Untuk melakukannya, selesaikan `create_train_val_dirs` di bawah:"],"metadata":{"id":"oCHUTEZLFg4C"}},{"cell_type":"code","source":["# grader-required-cell\n","\n","# Define root directory\n","root_dir = '/tmp/cats-v-dogs'\n","\n","# Empty directory to prevent FileExistsError is the function is run several times\n","if os.path.exists(root_dir):\n","  shutil.rmtree(root_dir)\n","\n","# GRADED FUNCTION: create_train_val_dirs\n","def create_train_val_dirs(root_path):\n","  \"\"\"\n","  Creates directories for the train and test sets\n","\n","  Args:\n","    root_path (string) - the base directory path to create subdirectories from\n","\n","  Returns:\n","    None\n","  \"\"\"\n","\n","  ### START CODE HERE\n","\n","  # HINT:\n","  # Use os.makedirs to create your directories with intermediate subdirectories\n","  # Don't hardcode the paths. Use os.path.join to append the new directories to the root_path parameter\n","\n","  os.makedirs(os.path.join(root_path, 'training'))\n","  os.makedirs(os.path.join(f'{root_path}/training', 'dogs'))\n","  os.makedirs(os.path.join(f'{root_path}/training', 'cats'))\n","  os.makedirs(os.path.join(root_path, 'testing'))\n","  os.makedirs(os.path.join(f'{root_path}/testing', 'dogs'))\n","  os.makedirs(os.path.join(f'{root_path}/testing', 'cats'))\n","\n","\n","  ### END CODE HERE\n","\n","\n","try:\n","  create_train_val_dirs(root_path=root_dir)\n","except FileExistsError:\n","  print(\"You should not be seeing this since the upper directory is removed beforehand\")"],"metadata":{"id":"zbXOnwf4Fkby","executionInfo":{"status":"ok","timestamp":1688393600636,"user_tz":-420,"elapsed":9,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["for rootdir, dirs, files in os.walk(root_dir):\n","    for subdir in dirs:\n","        print(os.path.join(rootdir, subdir))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BfU9GNBtGZOg","executionInfo":{"status":"ok","timestamp":1688393627740,"user_tz":-420,"elapsed":6,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}},"outputId":"c4ae0f2d-5eb3-4635-d8a9-06fea61192f3"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["/tmp/cats-v-dogs/testing\n","/tmp/cats-v-dogs/training\n","/tmp/cats-v-dogs/testing/cats\n","/tmp/cats-v-dogs/testing/dogs\n","/tmp/cats-v-dogs/training/cats\n","/tmp/cats-v-dogs/training/dogs\n"]}]},{"cell_type":"markdown","source":["Kode fungsi `split_data` yang menggunakan argumen berikut:\n","- SOURCE_DIR: direktori yang berisi file-file\n","\n","- TRAINING_DIR: direktori tempat sebagian file akan disalin (akan digunakan untuk pelatihan)\n","\n","- VALIDATION_DIR: direktori tempat sebagian file akan disalin (akan digunakan untuk validasi)\n","\n","- SPLIT_SIZE: menentukan porsi gambar yang digunakan untuk pelatihan.\n","\n","File harus diacak, sehingga set pelatihan adalah sampel acak dari file, dan set validasi terdiri dari file yang tersisa.\n","\n","Misalnya, jika `SOURCE_DIR` adalah `PetImages/Cat`, dan `SPLIT_SIZE` adalah .9, maka 90% gambar di `PetImages/Cat` akan disalin ke direktori `TRAINING_DIR`\n","dan 10% gambar akan disalin ke direktori `VALIDATION_DIR`.\n","\n","Semua gambar harus diperiksa sebelum penyalinan, jadi jika panjang file nol, gambar tersebut akan dihilangkan dari proses penyalinan. Jika demikian, maka fungsi Anda harus mencetak pesan seperti `\"filename is zero panjang, jadi abaikan.\"`. **Anda harus melakukan pemeriksaan ini sebelum pemisahan sehingga hanya gambar bukan nol yang dipertimbangkan saat melakukan pemisahan sebenarnya.**\n","\n","\n"," Petunjuk:\n","\n"," - `os.listdir(DIRECTORY)` mengembalikan daftar dengan isi direktori tersebut.\n","\n"," - `os.path.getsize(PATH)` mengembalikan ukuran file\n","\n"," - `copyfile(source, destination)` menyalin file dari sumber ke tujuan\n","\n"," - `random.sample(list, len(list))` mengocok daftar"],"metadata":{"id":"5HJwSxd9GjUe"}},{"cell_type":"code","source":["def split_data(SOURCE_DIR, TRAINING_DIR, VALIDATION_DIR, SPLIT_SIZE):\n","  \"\"\"\n","  Splits the data into train and test sets\n","\n","  Args:\n","    SOURCE_DIR (string): directory path containing the images\n","    TRAINING_DIR (string): directory path to be used for training\n","    VALIDATION_DIR (string): directory path to be used for validation\n","    SPLIT_SIZE (float): proportion of the dataset to be used for training\n","\n","  Returns:\n","    None\n","  \"\"\"\n","  ### START CODE HERE\n","  # Shuffle list\n","  shuffled_source = random.sample(os.listdir(SOURCE_DIR), len(os.listdir(SOURCE_DIR)))\n","\n","  # Find total number of files in training dir\n","  training_number = int(len(shuffled_source) * SPLIT_SIZE)\n","\n","  i = 0\n","  target = TRAINING_DIR\n","\n","  for item in shuffled_source:\n","    item_source = os.path.join(SOURCE_DIR, item)\n","    if os.path.getsize(item_source) == 0:\n","      print(f'{item} is zero length, so ignoring.')\n","    else:\n","      copyfile(item_source, os.path.join(target, item))\n","      i += 1\n","\n","    # Switch copy target to TESTING\n","    if i == training_number:\n","      target = VALIDATION_DIR\n","\n","\n","\n","  ### END CODE HERE"],"metadata":{"id":"37NdkSduGptF","executionInfo":{"status":"ok","timestamp":1688393794954,"user_tz":-420,"elapsed":5,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# grader-required-cell\n","\n","# Test your split_data function\n","\n","# Define paths\n","CAT_SOURCE_DIR = \"/tmp/PetImages/Cat/\"\n","DOG_SOURCE_DIR = \"/tmp/PetImages/Dog/\"\n","\n","TRAINING_DIR = \"/tmp/cats-v-dogs/training/\"\n","VALIDATION_DIR = \"/tmp/cats-v-dogs/testing/\"\n","\n","TRAINING_CATS_DIR = os.path.join(TRAINING_DIR, \"cats/\")\n","VALIDATION_CATS_DIR = os.path.join(VALIDATION_DIR, \"cats/\")\n","\n","TRAINING_DOGS_DIR = os.path.join(TRAINING_DIR, \"dogs/\")\n","VALIDATION_DOGS_DIR = os.path.join(VALIDATION_DIR, \"dogs/\")\n","\n","# Empty directories in case you run this cell multiple times\n","if len(os.listdir(TRAINING_CATS_DIR)) > 0:\n","  for file in os.scandir(TRAINING_CATS_DIR):\n","    os.remove(file.path)\n","if len(os.listdir(TRAINING_DOGS_DIR)) > 0:\n","  for file in os.scandir(TRAINING_DOGS_DIR):\n","    os.remove(file.path)\n","if len(os.listdir(VALIDATION_CATS_DIR)) > 0:\n","  for file in os.scandir(VALIDATION_CATS_DIR):\n","    os.remove(file.path)\n","if len(os.listdir(VALIDATION_DOGS_DIR)) > 0:\n","  for file in os.scandir(VALIDATION_DOGS_DIR):\n","    os.remove(file.path)\n","\n","# Define proportion of images used for training\n","split_size = .9\n","\n","# Run the function\n","# NOTE: Messages about zero length images should be printed out\n","split_data(CAT_SOURCE_DIR, TRAINING_CATS_DIR, VALIDATION_CATS_DIR, split_size)\n","split_data(DOG_SOURCE_DIR, TRAINING_DOGS_DIR, VALIDATION_DOGS_DIR, split_size)\n","\n","# Your function should perform copies rather than moving images so original directories should contain unchanged images\n","print(f\"\\n\\nOriginal cat's directory has {len(os.listdir(CAT_SOURCE_DIR))} images\")\n","print(f\"Original dog's directory has {len(os.listdir(DOG_SOURCE_DIR))} images\\n\")\n","\n","# Training and validation splits. Check that the number of images matches the expected output.\n","print(f\"There are {len(os.listdir(TRAINING_CATS_DIR))} images of cats for training\")\n","print(f\"There are {len(os.listdir(TRAINING_DOGS_DIR))} images of dogs for training\")\n","print(f\"There are {len(os.listdir(VALIDATION_CATS_DIR))} images of cats for validation\")\n","print(f\"There are {len(os.listdir(VALIDATION_DOGS_DIR))} images of dogs for validation\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CzaX7nweHMCq","executionInfo":{"status":"ok","timestamp":1688393873271,"user_tz":-420,"elapsed":7452,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}},"outputId":"36212328-d074-439a-8ccc-17622c86d4d9"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["666.jpg is zero length, so ignoring.\n","11702.jpg is zero length, so ignoring.\n","\n","\n","Original cat's directory has 12500 images\n","Original dog's directory has 12500 images\n","\n","There are 11250 images of cats for training\n","There are 11250 images of dogs for training\n","There are 1249 images of cats for validation\n","There are 1249 images of dogs for validation\n"]}]},{"cell_type":"markdown","source":["Sekarang setelah Anda berhasil mengatur data dengan cara yang dapat dengan mudah dimasukkan ke `ImageDataGenerator` Keras, sekarang saatnya bagi Anda untuk membuat kode generator yang akan menghasilkan kumpulan gambar, baik untuk pelatihan maupun validasi. Untuk ini, selesaikan fungsi `train_val_generators` di bawah.\n","\n","Sesuatu yang penting untuk diperhatikan adalah bahwa gambar dalam kumpulan data ini hadir dalam berbagai resolusi. Untungnya, metode `flow_from_directory` memungkinkan Anda untuk membakukan ini dengan menentukan tuple yang disebut `target_size` yang akan digunakan untuk mengonversi setiap gambar ke resolusi target ini. **Untuk latihan ini gunakan `target_size` sebesar (150, 150)**."],"metadata":{"id":"LqnvDKrNHSul"}},{"cell_type":"code","source":["def train_val_generators(TRAINING_DIR, VALIDATION_DIR):\n","  \"\"\"\n","  Creates the training and validation data generators\n","\n","  Args:\n","    TRAINING_DIR (string): directory path containing the training images\n","    VALIDATION_DIR (string): directory path containing the testing/validation images\n","\n","  Returns:\n","    train_generator, validation_generator - tuple containing the generators\n","  \"\"\"\n","  ### START CODE HERE\n","\n","  # Instantiate the ImageDataGenerator class (don't forget to set the arguments to augment the images)\n","  train_datagen = ImageDataGenerator(rescale=1./255.,\n","                                     rotation_range=40,\n","                                     width_shift_range=0.2,\n","                                     height_shift_range=0.2,\n","                                     shear_range=0.2,\n","                                     zoom_range=0.2,\n","                                     horizontal_flip=True,\n","                                     fill_mode='nearest')\n","\n","  # Pass in the appropriate arguments to the flow_from_directory method\n","  train_generator = train_datagen.flow_from_directory(directory=TRAINING_DIR,\n","                                                      batch_size=45,\n","                                                      class_mode='binary',\n","                                                      target_size=(150, 150))\n","\n","  # Instantiate the ImageDataGenerator class (don't forget to set the rescale argument)\n","  validation_datagen = ImageDataGenerator(rescale=1./255.)\n","\n","  # Pass in the appropriate arguments to the flow_from_directory method\n","  validation_generator = validation_datagen.flow_from_directory(directory=VALIDATION_DIR,\n","                                                                batch_size=5,\n","                                                                class_mode='binary',\n","                                                                target_size=(150, 150))\n","  ### END CODE HERE\n","  return train_generator, validation_generator"],"metadata":{"id":"EcC2VCZPHle3","executionInfo":{"status":"ok","timestamp":1688394122736,"user_tz":-420,"elapsed":5,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["train_generator, validation_generator = train_val_generators(TRAINING_DIR, VALIDATION_DIR)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z8RzybAyIcKO","executionInfo":{"status":"ok","timestamp":1688394138973,"user_tz":-420,"elapsed":559,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}},"outputId":"26f626a7-6793-4d1e-85ba-94f2b9d54298"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 22500 images belonging to 2 classes.\n","Found 2498 images belonging to 2 classes.\n"]}]},{"cell_type":"markdown","source":["Satu langkah terakhir sebelum pelatihan adalah menentukan arsitektur model yang akan dilatih.\n","\n","Selesaikan fungsi `create_model` di bawah ini yang akan mengembalikan model `Sequential` Keras.\n","\n","Selain mendefinisikan arsitektur model, Anda juga harus mengompilasinya jadi pastikan untuk menggunakan fungsi `loss` yang kompatibel dengan `class_mode` yang Anda tentukan di latihan sebelumnya, yang juga harus kompatibel dengan output jaringan Anda . Anda dapat mengetahui apakah mereka tidak kompatibel jika Anda mendapatkan kesalahan selama pelatihan.\n","\n","**Perhatikan bahwa Anda harus menggunakan setidaknya 3 lapisan konvolusi untuk mencapai performa yang diinginkan.**"],"metadata":{"id":"T6O-ahaOIf8r"}},{"cell_type":"code","source":["from tensorflow.keras.optimizers import RMSprop\n","def create_model():\n","  # DEFINE A KERAS MODEL TO CLASSIFY CATS V DOGS\n","  # USE AT LEAST 3 CONVOLUTION LAYERS\n","\n","  ### START CODE HERE\n","\n","  model = tf.keras.models.Sequential([\n","      tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=[150,150,3]),\n","      tf.keras.layers.MaxPooling2D(2, 2),\n","      tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n","      tf.keras.layers.MaxPooling2D(2, 2),\n","      tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n","      tf.keras.layers.MaxPooling2D(2, 2),\n","      tf.keras.layers.Flatten(),\n","      tf.keras.layers.Dense(512, activation='relu'),\n","      tf.keras.layers.Dense(1, activation='sigmoid')\n","  ])\n","\n","\n","  model.compile(optimizer=RMSprop(learning_rate=0.001),\n","                loss='binary_crossentropy',\n","                metrics=['accuracy'])\n","\n","  ### END CODE HERE\n","\n","  return model"],"metadata":{"id":"_qriiPrYIjio","executionInfo":{"status":"ok","timestamp":1688394408530,"user_tz":-420,"elapsed":397,"user":{"displayName":"Arya Widya Hastungkoro M042DSX0056","userId":"05026660905755862700"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Get the untrained model\n","model = create_model()\n","\n","# Train the model\n","# Note that this may take some time.\n","history = model.fit(train_generator,\n","                    epochs=15,\n","                    verbose=1,\n","                    validation_data=validation_generator)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D13mxZRGJhvb","outputId":"2fec59aa-435e-4193-87e9-6d7f18a6c22c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","196/500 [==========>...................] - ETA: 15:50 - loss: 0.7287 - accuracy: 0.5514"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/PIL/TiffImagePlugin.py:819: UserWarning: Truncated File Read\n","  warnings.warn(str(msg))\n"]},{"output_type":"stream","name":"stdout","text":["500/500 [==============================] - 1613s 3s/step - loss: 0.6744 - accuracy: 0.6024 - val_loss: 0.6487 - val_accuracy: 0.6345\n","Epoch 2/15\n","105/500 [=====>........................] - ETA: 20:01 - loss: 0.6123 - accuracy: 0.6643"]}]},{"cell_type":"markdown","source":["Setelah pelatihan selesai, Anda dapat menjalankan sel berikut untuk memeriksa pelatihan dan akurasi validasi yang dicapai pada akhir setiap zaman.\n","\n","**Untuk lulus tugas ini, model Anda harus mencapai akurasi pelatihan dan validasi minimal 80% dan akurasi pengujian akhir harus lebih tinggi dari model pelatihan atau memiliki perbedaan maksimal 5%**. Jika model Anda tidak mencapai ambang ini, coba latih lagi dengan arsitektur model yang berbeda, ingatlah untuk menggunakan setidaknya 3 lapisan convolutional atau coba sesuaikan proses augmentasi gambar.\n","\n","Anda mungkin bertanya-tanya mengapa ambang pelatihan untuk lulus tugas ini jauh lebih rendah dibandingkan dengan tugas minggu lalu. Augmentasi gambar memang membantu overfitting, tetapi biasanya hal ini mengorbankan waktu pelatihan yang lebih banyak. Agar waktu pelatihan tetap masuk akal, jumlah epoch yang sama seperti pada tugas sebelumnya dipertahankan.\n","\n","Namun, sebagai latihan opsional, Anda dianjurkan untuk mencoba pelatihan untuk lebih banyak zaman dan untuk mencapai akurasi pelatihan dan validasi yang sangat baik."],"metadata":{"id":"zI3PWfBAJkQo"}},{"cell_type":"code","source":["#-----------------------------------------------------------\n","# Retrieve a list of list results on training and test data\n","# sets for each training epoch\n","#-----------------------------------------------------------\n","acc=history.history['accuracy']\n","val_acc=history.history['val_accuracy']\n","loss=history.history['loss']\n","val_loss=history.history['val_loss']\n","\n","epochs=range(len(acc)) # Get number of epochs\n","\n","#------------------------------------------------\n","# Plot training and validation accuracy per epoch\n","#------------------------------------------------\n","plt.plot(epochs, acc, 'r', \"Training Accuracy\")\n","plt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\n","plt.title('Training and validation accuracy')\n","plt.show()\n","print(\"\")\n","\n","#------------------------------------------------\n","# Plot training and validation loss per epoch\n","#------------------------------------------------\n","plt.plot(epochs, loss, 'r', \"Training Loss\")\n","plt.plot(epochs, val_loss, 'b', \"Validation Loss\")\n","plt.show()"],"metadata":{"id":"nDmEdrzyJqx5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Anda mungkin akan menemukan bahwa modelnya overfitting, yang berarti bahwa model melakukan pekerjaan yang baik dalam mengklasifikasikan gambar dalam set pelatihan tetapi kesulitan dengan data baru. Ini baik-baik saja dan Anda akan belajar cara mengurangi masalah ini di minggu mendatang.\n","\n","Sebelum menutup tugas, pastikan juga mengunduh file `history.pkl` yang berisi informasi riwayat pelatihan model Anda. Anda dapat mengunduh file ini dengan menjalankan sel di bawah ini:"],"metadata":{"id":"zO7vMw8yJ59-"}},{"cell_type":"code","source":[],"metadata":{"id":"-76oUsnVJ9AL"},"execution_count":null,"outputs":[]}]}